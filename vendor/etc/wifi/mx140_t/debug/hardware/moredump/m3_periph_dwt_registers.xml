<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for m3_periph_dwt subsystem moredump
  Chip hash: 0147


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="m3_periph_dwt">
  <block name="m3_periph_dwt_module" comment="">
    <register addr="e0001000" rw_flags="R" width="4" name="DWT_CTRL" comment="Use the DWT Control Register to enable the DWT unit."/>
    <register addr="e0001004" rw_flags="R" width="4" name="DWT_CYCCNT" comment="Use the DWT Current PC Sampler Cycle Count Register to count the number of core cycles. This count can measure elapsed execution time. This is a free-running counter. The counter has three functions: &amp;lt;br&amp;gt;* When PCSAMPLENA is set, the PC is sampled and emitted when the selected tapped bit changes value (0 to 1 or 1 to 0) and any post-scalar value counts to 0. &amp;lt;br&amp;gt;* When CYCEVTENA is set (and PCSAMPLENA is clear), an event is emitted when the selected tapped bit changes value (0 to 1 or 1 to 0) and any post-scalar value counts to 0. &amp;lt;br&amp;gt;* Applications and debuggers can use the counter to measure elapsed execution time. By subtracting a start and an end time, an application can measure time between in-core clocks (other than when Halted in debug). This is valid to 232 core clock cycles (for example, almost 86 seconds at 50MHz)."/>
    <register addr="e0001008" rw_flags="RW" width="4" name="DWT_CPICNT" comment="Use the DWT CPI Count Register to count the total number of instruction cycles beyond the first cycle."/>
    <register addr="e000100c" rw_flags="RW" width="4" name="DWT_EXCCNT" comment="Use the DWT Exception Overhead Count Register to count the total cycles spent in interrupt processing."/>
    <register addr="e0001010" rw_flags="RW" width="4" name="DWT_SLEEPCNT" comment="Use the DWT Sleep Count Register to count the total number of cycles during which the processor is sleeping. SLEEPCNT is clocked using FCLK. It is possible that the frequency of FCLK might be reduced while the processor is sleeping to minimize power consumption. This means that sleep duration must be calculated with the frequency of FCLK during sleep."/>
    <register addr="e0001014" rw_flags="RW" width="4" name="DWT_LSUCNT" comment="Use the DWT LSU Count Register to count the total number of cycles during which the processor is processing an LSU operation beyond the first cycle."/>
    <register addr="e0001018" rw_flags="RW" width="4" name="DWT_FOLDCNT" comment="Use the DWT Fold Count Register to count the total number of folded instructions. This counts 1 for each instruction that takes 0 cycles."/>
    <register addr="e000101c" rw_flags="R" width="4" name="DWT_PCSR" comment="Use the DWT Program Counter Sample Register (PCSR) to enable coarse-grained software profiling using a debug agent, without changing the currently executing code. If the core is not in debug state, the value returned is the instruction address of a recently executed instruction. If the core is in debug state, the value returned is 0xFFFFFFFF."/>
    <register addr="e0001020" rw_flags="RW" width="4" name="DWT_COMP0" comment="Use the DWT Comparator Registers 0-3 to write the values that trigger watchpoint events."/>
    <register addr="e0001024" rw_flags="RW" width="4" name="DWT_MASK0" comment=""/>
    <register addr="e0001028" rw_flags="RW" width="4" name="DWT_FUNCTION0" comment="Use the DWT Function Registers 0-3 to control the operation of the comparator. Each comparator can: &amp;lt;br&amp;gt;* Match against either the PC or the data address. This is controlled by CYCMATCH. This function is only available for comparator 0 (DWT_COMP0). &amp;lt;br&amp;gt;* Perform data value comparisons if associated address comparators have performed an address match. This function is only available for comparator 1 (DWT_COMP1). &amp;lt;br&amp;gt;* Emit data or PC couples, trigger the ETM, or generate a watchpoint depending on the operation defined by FUNCTION."/>
    <register addr="e0001030" rw_flags="RW" width="4" name="DWT_COMP1" comment="Use the DWT Comparator Registers 0-3 to write the values that trigger watchpoint events."/>
    <register addr="e0001034" rw_flags="RW" width="4" name="DWT_MASK1" comment=""/>
    <register addr="e0001038" rw_flags="RW" width="4" name="DWT_FUNCTION1" comment="Use the DWT Function Registers 0-3 to control the operation of the comparator. Each comparator can: &amp;lt;br&amp;gt;* Match against either the PC or the data address. This is controlled by CYCMATCH. This function is only available for comparator 0 (DWT_COMP1). &amp;lt;br&amp;gt;* Perform data value comparisons if associated address comparators have performed an address match. This function is only available for comparator 1 (DWT_COMP1). &amp;lt;br&amp;gt;* Emit data or PC couples, trigger the ETM, or generate a watchpoint depending on the operation defined by FUNCTION."/>
    <register addr="e0001040" rw_flags="RW" width="4" name="DWT_COMP2" comment="Use the DWT Comparator Registers 0-3 to write the values that trigger watchpoint events."/>
    <register addr="e0001044" rw_flags="RW" width="4" name="DWT_MASK2" comment=""/>
    <register addr="e0001048" rw_flags="RW" width="4" name="DWT_FUNCTION2" comment="Use the DWT Function Registers 0-3 to control the operation of the comparator. Each comparator can: &amp;lt;br&amp;gt;* Match against either the PC or the data address. This is controlled by CYCMATCH. This function is only available for comparator 0 (DWT_COMP2). &amp;lt;br&amp;gt;* Perform data value comparisons if associated address comparators have performed an address match. This function is only available for comparator 1 (DWT_COMP2). &amp;lt;br&amp;gt;* Emit data or PC couples, trigger the ETM, or generate a watchpoint depending on the operation defined by FUNCTION."/>
    <register addr="e0001050" rw_flags="RW" width="4" name="DWT_COMP3" comment="Use the DWT Comparator Registers 0-3 to write the values that trigger watchpoint events."/>
    <register addr="e0001054" rw_flags="RW" width="4" name="DWT_MASK3" comment=""/>
    <register addr="e0001058" rw_flags="RW" width="4" name="DWT_FUNCTION3" comment="Use the DWT Function Registers 0-3 to control the operation of the comparator. Each comparator can: &amp;lt;br&amp;gt;* Match against either the PC or the data address. This is controlled by CYCMATCH. This function is only available for comparator 0 (DWT_COMP3). &amp;lt;br&amp;gt;* Perform data value comparisons if associated address comparators have performed an address match. This function is only available for comparator 1 (DWT_COMP3). &amp;lt;br&amp;gt;* Emit data or PC couples, trigger the ETM, or generate a watchpoint depending on the operation defined by FUNCTION."/>
    <register addr="e0001fd0" rw_flags="R" width="4" name="DWT_PID4" comment=""/>
    <register addr="e0001fd4" rw_flags="R" width="4" name="DWT_PID5" comment=""/>
    <register addr="e0001fd8" rw_flags="R" width="4" name="DWT_PID6" comment=""/>
    <register addr="e0001fdc" rw_flags="R" width="4" name="DWT_PID7" comment=""/>
    <register addr="e0001fe0" rw_flags="R" width="4" name="DWT_PID0" comment=""/>
    <register addr="e0001fe4" rw_flags="R" width="4" name="DWT_PID1" comment=""/>
    <register addr="e0001fe8" rw_flags="R" width="4" name="DWT_PID2" comment=""/>
    <register addr="e0001fec" rw_flags="R" width="4" name="DWT_PID3" comment=""/>
    <register addr="e0001ff0" rw_flags="R" width="4" name="DWT_CID0" comment=""/>
    <register addr="e0001ff4" rw_flags="R" width="4" name="DWT_CID1" comment=""/>
    <register addr="e0001ff8" rw_flags="R" width="4" name="DWT_CID2" comment=""/>
    <register addr="e0001ffc" rw_flags="R" width="4" name="DWT_CID3" comment=""/>
  </block>
</subsystem>

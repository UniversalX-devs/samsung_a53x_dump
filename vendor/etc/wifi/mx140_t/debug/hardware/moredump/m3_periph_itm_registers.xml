<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for m3_periph_itm subsystem moredump
  Chip hash: 0147


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="m3_periph_itm">
  <block name="m3_periph_itm_module" comment="">
    <register addr="e0000000" rw_flags="RW" width="4" name="ITM_STIM_PORTS[0]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000004" rw_flags="RW" width="4" name="ITM_STIM_PORTS[1]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000008" rw_flags="RW" width="4" name="ITM_STIM_PORTS[2]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000000c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[3]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000010" rw_flags="RW" width="4" name="ITM_STIM_PORTS[4]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000014" rw_flags="RW" width="4" name="ITM_STIM_PORTS[5]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000018" rw_flags="RW" width="4" name="ITM_STIM_PORTS[6]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000001c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[7]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000020" rw_flags="RW" width="4" name="ITM_STIM_PORTS[8]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000024" rw_flags="RW" width="4" name="ITM_STIM_PORTS[9]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000028" rw_flags="RW" width="4" name="ITM_STIM_PORTS[10]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000002c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[11]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000030" rw_flags="RW" width="4" name="ITM_STIM_PORTS[12]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000034" rw_flags="RW" width="4" name="ITM_STIM_PORTS[13]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000038" rw_flags="RW" width="4" name="ITM_STIM_PORTS[14]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000003c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[15]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000040" rw_flags="RW" width="4" name="ITM_STIM_PORTS[16]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000044" rw_flags="RW" width="4" name="ITM_STIM_PORTS[17]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000048" rw_flags="RW" width="4" name="ITM_STIM_PORTS[18]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000004c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[19]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000050" rw_flags="RW" width="4" name="ITM_STIM_PORTS[20]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000054" rw_flags="RW" width="4" name="ITM_STIM_PORTS[21]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000058" rw_flags="RW" width="4" name="ITM_STIM_PORTS[22]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000005c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[23]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000060" rw_flags="RW" width="4" name="ITM_STIM_PORTS[24]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000064" rw_flags="RW" width="4" name="ITM_STIM_PORTS[25]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000068" rw_flags="RW" width="4" name="ITM_STIM_PORTS[26]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000006c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[27]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000070" rw_flags="RW" width="4" name="ITM_STIM_PORTS[28]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000074" rw_flags="RW" width="4" name="ITM_STIM_PORTS[29]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000078" rw_flags="RW" width="4" name="ITM_STIM_PORTS[30]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e000007c" rw_flags="RW" width="4" name="ITM_STIM_PORTS[31]" comment='Each of the 32 stimulus ports has its own address.&amp;lt;br&amp;gt;&amp;#10;A write to one of these locations causes data to be written into the FIFO if the corresponding bit in the Trace Enable Register is set.&amp;lt;br&amp;gt;&amp;#10;Reading from any of the stimulus ports returns the FIFO status in bit [0]:&amp;lt;br&amp;gt;&amp;#10;* 0 = full&amp;lt;br&amp;gt;&amp;#10;* 1 = not full&amp;lt;br&amp;gt;&amp;#10;The polled FIFO interface does not provide an atomic read-modify-write, so you must&amp;#10;use the Cortex-M3 exclusive monitor if a polled printf is used concurrently with ITM&amp;#10;usage by interrupts or other threads.&amp;lt;br&amp;gt; The following polled code guarantees stimulus is&amp;#10;not lost by polled access to the ITM:&amp;#10;&amp;lt;pre style="font-size:larger"&amp;gt;&amp;#10;; r0 = Value to write to port&amp;#10;; r1 and r2 = Temporary scratch registers&amp;#10;      MOV     r1,  0xE0000000   ; r1 = Stimulus port base&amp;#10;Retry LDREX   r2, [r1,  Port*4] ; Load FIFO full status&amp;#10;      CMP     r2,  0            ; Compare with full&amp;#10;      ITT     NE                ; If (not full)&amp;#10;      STREXNE r2, [r1,  Port*4] ; Try sending value to port&amp;#10;      CMPNE   r2,  1            ; and check for failure&amp;#10;      BEQ     Retry             ; If full or failed then retry&amp;#10;&amp;lt;/pre&amp;gt;&amp;#10;'/>
    <register addr="e0000e00" rw_flags="RW" width="4" name="ITM_TRACEENA" comment=""/>
    <register addr="e0000e40" rw_flags="RW" width="4" name="ITM_TRACEPRIV" comment="Use the ITM Trace Privilege Register to enable an operating system to control which stimulus ports are accessible by user code."/>
    <register addr="e0000e80" rw_flags="RW" width="4" name="ITM_TRACECTRL" comment="Use this register to configure and control ITM transfers. You can only write to this register in privilege mode."/>
    <register addr="e0000ef8" rw_flags="W" width="4" name="ITM_INTEGWRITE" comment="Use this register to determine the behavior of the ATVALIDM bit."/>
    <register addr="e0000efc" rw_flags="R" width="4" name="ITM_INTEGREAD" comment="Use this register to read the value on ATREADYM"/>
    <register addr="e0000f00" rw_flags="RW" width="4" name="ITM_INTEGMODECTRL" comment="Use this register to enable write accesses to the Control Register."/>
    <register addr="e0000fb0" rw_flags="W" width="4" name="ITM_LOCKACCESS" comment="Use this register to prevent write accesses to the Control Register."/>
    <register addr="e0000fb4" rw_flags="R" width="4" name="ITM_LOCKSTATUS" comment="Use this register to enable write accesses to the Control Register."/>
    <register addr="e0000fd0" rw_flags="R" width="4" name="ITM_PID4" comment=""/>
    <register addr="e0000fd4" rw_flags="R" width="4" name="ITM_PID5" comment=""/>
    <register addr="e0000fd8" rw_flags="R" width="4" name="ITM_PID6" comment=""/>
    <register addr="e0000fdc" rw_flags="R" width="4" name="ITM_PID7" comment=""/>
    <register addr="e0000fe0" rw_flags="R" width="4" name="ITM_PID0" comment=""/>
    <register addr="e0000fe4" rw_flags="R" width="4" name="ITM_PID1" comment=""/>
    <register addr="e0000fe8" rw_flags="R" width="4" name="ITM_PID2" comment=""/>
    <register addr="e0000fec" rw_flags="R" width="4" name="ITM_PID3" comment=""/>
    <register addr="e0000ff0" rw_flags="R" width="4" name="ITM_CID0" comment=""/>
    <register addr="e0000ff4" rw_flags="R" width="4" name="ITM_CID1" comment=""/>
    <register addr="e0000ff8" rw_flags="R" width="4" name="ITM_CID2" comment=""/>
    <register addr="e0000ffc" rw_flags="R" width="4" name="ITM_CID3" comment=""/>
  </block>
</subsystem>
